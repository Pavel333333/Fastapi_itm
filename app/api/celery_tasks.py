import os
import time

from celery import Celery

from app.database import get_db_sync_session
from app.db.models import Document, DocumentText

import requests
import json
import pika

# –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç RabbitMQ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost –¥–ª—è DEV
RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'localhost')
RABBITMQ_USER = os.getenv('RABBITMQ_USER', 'pavel')
RABBITMQ_PASS = os.getenv('RABBITMQ_PASS', 'pavel')

celery_app = Celery('celery_fastapi_itm', broker=f'amqp://{RABBITMQ_USER}:{RABBITMQ_PASS}@{RABBITMQ_HOST}:5672//',
                    backend='rpc://', broker_connection_retry_on_startup=True)

celery_app.conf.update(task_always_eager=True, task_get_db_session=get_db_sync_session)

def publish_result_to_rabbitmq(result, queue='doc_analyze_results'):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        connection = pika.BlockingConnection(pika.ConnectionParameters(RABBITMQ_HOST, 5672,
                                                                       credentials=pika.PlainCredentials(RABBITMQ_USER,
                                                                                                         RABBITMQ_PASS)))
        channel = connection.channel()
        # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, durable=True –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        channel.queue_declare(queue=queue, durable=True)
        # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
        channel.basic_publish(exchange='', routing_key=queue, body=json.dumps(result),
                              properties=pika.BasicProperties(delivery_mode=2))
        connection.close()
    except Exception as e:
        print(f"üî¥ Failed to connect to RabbitMQ: {str(e)}")

@celery_app.task
def get_text_from_foto(id: int):
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
    try:
        with celery_app.conf.task_get_db_session() as db:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
            check_doc_in_db = db.query(Document).filter_by(id=id).one_or_none()

            if not check_doc_in_db:
                # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
                result = {'id': id, 'message': '—Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ'}
                publish_result_to_rabbitmq(result)  # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
                return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ DocumentText
            query_related_documents = db.query(DocumentText).filter_by(id_doc=id).first()

            if query_related_documents:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
                result = {'id': id, 'text': query_related_documents.text}
                publish_result_to_rabbitmq(result)  # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
                return result

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            image_path: str = check_doc_in_db.path
            # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
            json_from_file = ocr_space_file(image_url=image_path, api_key='K89023680188957', language='rus')
            json_from_file = json.loads(json_from_file)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ ParsedResults
            if not json_from_file.get("ParsedResults"):
                result = {'id': id, 'text': 'No parsed results from OCR'}
                publish_result_to_rabbitmq(result)
                return result

            text_from_file = json_from_file["ParsedResults"][0]["ParsedText"]

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ DocumentText
            new_entry_in_doc_text = DocumentText(document=check_doc_in_db, text=text_from_file)
            db.add(new_entry_in_doc_text)
            db.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {'id': id, 'text': text_from_file}
            publish_result_to_rabbitmq(result)  # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
            return result

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        result = {'id': id, 'error': str(e)}
        publish_result_to_rabbitmq(result)  # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
        return result


def ocr_space_file(image_url, overlay=False, api_key='helloworld', language='eng'):

    payload = {'isOverlayRequired': overlay, 'apikey': api_key, 'language': language}
    with open(image_url, 'rb') as f:
        r = requests.post('https://api.ocr.space/parse/image', files={image_url: f}, data=payload)
    return r.content.decode()