stages: [.pre, build, test, deploy, .post]

build-job:
  stage: build
  script:
    - docker build -t app_fastapi_itm .
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

test-job:
  stage: test
  script:
    - docker compose up -d test_db --no-env
    - |
      until docker run --rm --network mynetwork postgres:17 pg_isready -h test_db -U postgres; do
        echo "Waiting for test_db to be ready..."
        sleep 2
      done
    - docker run --rm -i -e PGPASSWORD=postgres --network mynetwork postgres:17 psql -h test_db -U postgres -d fastapi_itm_test -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
    - |
      cat $CI_PROJECT_DIR/fastapi_itm_test_dump.sql | \
      grep -v "transaction_timeout" | \
      docker run --rm -i -e PGPASSWORD=postgres --network mynetwork postgres:17 psql -h test_db -U postgres -d fastapi_itm_test
    - |
      docker rm -f test_container || true
      docker run -d --name test_container --network mynetwork \
        -e "MODE=TEST" \
        -e "RABBITMQ_HOST=rabbitmq" \
        -e "RABBITMQ_USER=guest" \
        -e "RABBITMQ_PASS=guest" \
        -e "TEST_DB_USER=postgres" \
        -e "TEST_DB_PASSWORD=postgres" \
        -e "TEST_DB_HOST=test_db" \
        -e "TEST_DB_PORT=5432" \
        -e "TEST_DB_NAME=fastapi_itm_test" \
        -e "PATH_TO_FILES=/app/documents_for_tests" \
        python:3.11 tail -f /dev/null
      docker cp $CI_PROJECT_DIR/requirements.txt test_container:/app/requirements.txt
      docker cp $CI_PROJECT_DIR/app test_container:/app
      docker cp $CI_PROJECT_DIR/app/tests test_container:/app/tests
      docker exec test_container sh -c "mkdir -p /app/documents_for_tests"
      docker exec test_container sh -c "apt-get update && apt-get install -y python3-pip netcat-openbsd curl && pip install -r /app/requirements.txt && pip install pytest uvicorn"
      docker exec test_container sh -c "ls -la /app/api/endpoints.py || echo 'endpoints.py not found'"
      docker exec test_container sh -c "python -c 'from app.api.endpoints import router; print(\"Endpoints imported successfully\")' || echo 'Failed to import endpoints.py'"
      docker exec test_container sh -c "python -c 'from app.config import settings; print(\"Async Test DB URL:\", settings.get_async_test_db_url())' || echo 'Failed to get DB URL'"
      docker exec -d test_container sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8001 --log-level debug > /tmp/uvicorn.log 2>&1"
      sleep 5
      if docker exec test_container nc -z localhost 8001; then
        echo "FastAPI server is ready!"
        docker exec test_container sh -c "python -c 'from app.main import app; print([r.path for r in app.routes])' > /tmp/routes.log"
        docker exec test_container sh -c "cat /tmp/routes.log"
      else
        echo "FastAPI server failed to start!"
        docker exec test_container sh -c "cat /tmp/uvicorn.log"
        exit 1
      fi
      response_code=$(docker exec test_container sh -c "curl -X POST -F 'file=@/app/tests/test_files/fgh.jpeg' -s -o /dev/null -w '%{http_code}' http://localhost:8001/files/upload_doc")
      response_body=$(docker exec test_container sh -c "curl -X POST -F 'file=@/app/tests/test_files/fgh.jpeg' -s http://localhost:8001/files/upload_doc")
      if [ "$response_code" -ne 200 ]; then
        echo "Upload endpoint not responding correctly: $response_code"
        echo "Response body: $response_body"
        docker exec test_container sh -c "cat /tmp/uvicorn.log"
        docker exec test_container sh -c "cat /tmp/routes.log"
        exit 1
      fi
      docker exec test_container sh -c "pytest -v /app/tests"
      docker stop test_container
      docker rm test_container
    - docker compose down
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

deploy-job:
  stage: deploy
  environment: production
  script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - cat "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh && ssh-keyscan -H 176.123.165.243 >> ~/.ssh/known_hosts
    - scp docker-compose.yml admin@176.123.165.243:/home/admin/fastapi_itm/
    - ssh admin@176.123.165.243 "cd /home/admin/fastapi_itm && echo DATABASE_URL=\$DATABASE_URL > .env-not-dev"
    - ssh admin@176.123.165.243 "cd /home/admin/fastapi_itm && echo RABBITMQ_URL=\$RABBITMQ_URL >> .env-not-dev"
    - ssh admin@176.123.165.243 "cd /home/admin/fastapi_itm && docker compose down && docker compose up -d --build"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'