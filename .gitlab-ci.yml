stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  script:
    - docker build -t app_fastapi_itm .
  tags:
    - fastapi_itm
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

test-job:
  stage: test
  script:
    - docker compose down -v
    - docker build --no-cache -t app_fastapi_itm .  # Пересборка образа
    - echo "TEST_DB_USER=$TEST_DB_USER, TEST_DB_PASSWORD=$TEST_DB_PASSWORD, TEST_DB_NAME=$TEST_DB_NAME"  # Проверка переменных
    - MODE=$MODE TEST_DB_HOST=$TEST_DB_HOST TEST_DB_PORT=$TEST_DB_PORT TEST_DB_NAME=$TEST_DB_NAME TEST_DB_USER=$TEST_DB_USER TEST_DB_PASSWORD=$TEST_DB_PASSWORD DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_NAME=$DB_NAME DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD RABBITMQ_HOST=$RABBITMQ_HOST RABBITMQ_USER=$RABBITMQ_USER RABBITMQ_PASS=$RABBITMQ_PASS RABBITMQ_VHOST=$RABBITMQ_VHOST APP_URL=$APP_URL docker compose up -d test_db app_fastapi
    - docker rm -f temp_celery || true  # Удаление старого контейнера
    - docker run -d --name temp_celery --network mynetwork -e MODE=$MODE -e TEST_DB_HOST=$TEST_DB_HOST -e TEST_DB_PORT=$TEST_DB_PORT -e TEST_DB_NAME=$TEST_DB_NAME -e TEST_DB_USER=$TEST_DB_USER -e TEST_DB_PASSWORD=$TEST_DB_PASSWORD -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_NAME=$DB_NAME -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD -e RABBITMQ_HOST=$RABBITMQ_HOST -e RABBITMQ_USER=$RABBITMQ_USER -e RABBITMQ_PASS=$RABBITMQ_PASS -e RABBITMQ_VHOST=$RABBITMQ_VHOST -e APP_URL=$APP_URL celery_image celery -A app.api.celery_tasks worker --loglevel=info -b "amqp://admin:admin@container_fastapi_rabbitmq:5672/fastapi_itm_vhost"  # Полные переменные
    - sleep 55  # Вернул 55 секунд
    - docker ps -a
    - docker logs container_fastapi_db_test  # Лог базы
    - docker exec container_fastapi_app bash -c "timeout 10 bash -c 'until </dev/tcp/container_fastapi_db_test/5432; do sleep 1; done' && echo 'Port 5432 accessible' || echo 'Port 5432 not accessible'"  # Проверка внутреннего порта
    - docker exec temp_celery bash -c "timeout 10 bash -c 'until </dev/tcp/container_fastapi_rabbitmq/5672; do sleep 1; done' && echo 'Port 5672 accessible' || echo 'Port 5672 not accessible'"  # Проверка RabbitMQ
    - docker logs container_fastapi_app
    - docker logs temp_celery
    - if [ "$(docker inspect -f '{{.State.Running}}' container_fastapi_app)" != "true" ]; then echo "App container not running"; exit 1; fi
    - docker exec container_fastapi_app pytest -s -v
    - docker compose down -v
    - docker stop temp_celery && docker rm temp_celery  # Очистка
  variables:
    MODE: "TEST"
    TEST_DB_HOST: "container_fastapi_db_test"
    TEST_DB_PORT: "5434"
    TEST_DB_NAME: "fastapi_itm_test"
    TEST_DB_USER: "$TEST_DB_USER"
    TEST_DB_PASSWORD: "$TEST_DB_PASSWORD"
    DB_HOST: "container_fastapi_db"
    DB_PORT: "5433"
    DB_NAME: "fastapi_itm_db"
    DB_USER: "$DB_USER"
    DB_PASSWORD: "$DB_PASSWORD"
    RABBITMQ_HOST: "container_fastapi_rabbitmq"
    RABBITMQ_USER: "admin"
    RABBITMQ_PASS: "admin"
    RABBITMQ_VHOST: "fastapi_itm_vhost"
    APP_URL: "http://localhost:3333"
  tags:
    - fastapi_itm
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

deploy-job:
  stage: deploy
  script:
    - ssh pavel@82.202.138.125 "cd /home/pavel/dev/fastapi_itm && docker compose down && docker image prune -f && docker network prune -f && MODE=$MODE DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_NAME=$DB_NAME RABBITMQ_HOST=$RABBITMQ_HOST RABBITMQ_USER=$RABBITMQ_USER RABBITMQ_PASS=$RABBITMQ_PASS APP_URL=$APP_URL docker compose up -d --build"
  variables:
    MODE: "DEV"
    DB_HOST: "container_fastapi_db"
    DB_PORT: "5433"
    DB_NAME: "fastapi_itm_db"
    RABBITMQ_HOST: "container_fastapi_rabbitmq"
    RABBITMQ_USER: "admin"
    RABBITMQ_PASS: "admin"
    APP_URL: "http://localhost:3333"
  tags:
    - fastapi_itm
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'