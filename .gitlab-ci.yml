stages:
  - build
  - test
  - deploy

variables:
  POSTGRES_DB: fastapi_itm_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  TEST_DB_HOST: postgres
  TEST_DB_PORT: 5432
  RABBITMQ_HOST: rabbitmq
  RABBITMQ_USER: guest
  RABBITMQ_PASS: guest

# Build job: Сборка Docker-образа
build-job:
  stage: build
  script:
    # Собираем Docker-образ
    - docker build -t app_fastapi_itm .
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

# Test job: Запуск тестов
test-job:
  stage: test
  services:
    - postgres:17  # PostgreSQL для тестов
    - rabbitmq:3-management  # RabbitMQ для тестов
  variables:
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  before_script:
    # Очистка старых контейнеров
    - docker stop test_container || true
    - docker rm -f test_container || true

    # Установка зависимостей
    - apt-get update && apt-get install -y curl netcat

    # Ожидание готовности PostgreSQL
    - until nc -z "$TEST_DB_HOST" "$TEST_DB_PORT"; do echo "Waiting for PostgreSQL to be ready..."; sleep 2; done

    # Создание тестовой базы данных
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h "$TEST_DB_HOST" -U "$POSTGRES_USER" -c "CREATE DATABASE $POSTGRES_DB;"

    # Восстановление данных из дампа
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h "$TEST_DB_HOST" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f $CI_PROJECT_DIR/fastapi_itm_test_dump.sql
  script:
    # Запуск тестового контейнера
    - docker run --rm --name test_container \
        -e MODE=TEST \
        -e DATABASE_URL="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$TEST_DB_HOST:$TEST_DB_PORT/$POSTGRES_DB" \
        -v $CI_PROJECT_DIR/app:/app \
        -v $CI_PROJECT_DIR/tests:/app/tests \
        python:3.12 sh -c "
          pip install -r /app/requirements.txt &&
          pytest -v /app/tests"
  after_script:
    # Очистка после выполнения job
    - docker stop test_container || true
    - docker rm -f test_container || true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

# Deploy job: Развертывание приложения
deploy-job:
  stage: deploy
  environment: production
  script:
    # Настройка SSH-ключа
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - cat "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh && ssh-keyscan -H 176.123.165.243 >> ~/.ssh/known_hosts

    # Копирование файлов на сервер
    - scp $CI_PROJECT_DIR/docker-compose.yml admin@176.123.165.243:/home/admin/fastapi_itm/
    - ssh admin@176.123.165.243 "cd /home/admin/fastapi_itm && echo DATABASE_URL=\$DATABASE_URL > .env-not-dev"
    - ssh admin@176.123.165.243 "cd /home/admin/fastapi_itm && echo RABBITMQ_URL=\$RABBITMQ_URL >> .env-not-dev"

    # Перезапуск приложения
    - ssh admin@176.123.165.243 "cd /home/admin/fastapi_itm && docker compose down && docker compose up -d --build"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'