stages:
  - build
  - test
  - deploy

# Переменные для удобства (можно также использовать GitLab Variables)
variables:
  TEST_DB_NAME: $TEST_DB_NAME
  TEST_DB_USER: $TEST_DB_USER
  TEST_DB_PASSWORD: $TEST_DB_PASSWORD
  TEST_DB_HOST: "test_db"  # Указано, что TEST_DB_HOST заменён на test_db
  TEST_DB_PORT: "5432"

# Job для сборки Docker-образа
build-job:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  script:
    - docker build -t app_fastapi_itm:latest -f Dockerfile .
    - docker save app_fastapi_itm:latest > app_fastapi_itm.tar  # Сохраняем образ для передачи
  artifacts:
    paths:
      - app_fastapi_itm.tar  # Передаём образ в следующие job
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

# Job для запуска тестов
test-job:
  stage: test
  image: docker:24.0
  variables:
    MODE: "TEST"
    TEST_DB_TYPE: "sqlite"
    TEST_DB_PATH: "/tmp/test.db"
  before_script:
    - docker load < app_fastapi_itm.tar
  script:
    - docker run -d --name test_container -e MODE=TEST -e TEST_DB_TYPE=sqlite -e TEST_DB_PATH=/tmp/test.db app_fastapi_itm:latest tail -f /dev/null
    - docker cp app/tests/test_files/. test_container:/doc/documents_for_tests/
    - docker exec test_container pip install pytest pytest-asyncio
    - docker exec test_container pytest -v /doc/app/tests/test_api.py
    - docker stop test_container
    - docker rm test_container
  dependencies:
    - build-job
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

# Job для развёртывания (упрощённая версия)
deploy-job:
  stage: deploy
  image: docker:24.0
  script:
    - echo "Развёртывание на сервер (здесь должен быть реальный код деплоя)"
    - docker load < app_fastapi_itm.tar
    - docker tag app_fastapi_itm:latest myregistry/app_fastapi_itm:$CI_COMMIT_SHA
    - echo "Образ готов для деплоя: myregistry/app_fastapi_itm:$CI_COMMIT_SHA"
  dependencies:
    - test-job  # Деплой зависит от успешных тестов
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'