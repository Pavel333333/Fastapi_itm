networks:
  mynetwork:
    external: true

volumes:
  shared_images:
    driver: local
  shared_data:
    driver: local

# docker network create mynetwork - перед созданием контейнеров создаётся общая сеть для трёх проектов

services:
#  db_fastapi:
#    image: postgres:15
#    container_name: container_fastapi_db
#    environment:
#      - POSTGRES_DB=fastapi_itm_db
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#    env_file:
#      - .env-not-dev
#    ports:
#      - "5433:5432" # первая цифра внешний порт, вторая - какой порт слушается внутри контейнера
#    # command: sh -c "env && docker-entrypoint.sh postgres"
#    networks:
#      - mynetwork

  test_db: # база для test-job в Gitlab CI/CD
    image: postgres:17
    container_name: container_fastapi_db_test
#    env_file:
#      - .env-not-dev  # Для локального запуска
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - POSTGRES_DB=${TEST_DB_NAME}
    ports:
      - "5434:5432"  # Отдельный порт, чтобы не конфликтовать с основной базой
    networks:
      - mynetwork

#  rabbitmq:
#    image: rabbitmq:3-management
#    container_name: container_fastapi_rabbitmq
#    env_file:
#      - .env-not-dev
#    ports:
#      - "5673:5672" # первая цифра внешний порт, вторая - какой порт слушается внутри контейнера
#      - "15672:15672"  # Веб-интерфейс RabbitMQ
#    networks:
#      - mynetwork

  app_fastapi:
    image: app_fastapi_itm
    build:  # этот ключ указывает Docker Compose, что необходимо построить образ для данного сервиса на основе Dockerfile.
      context: .  # путь к контексту сборки (build context) текущая директория, то есть искать докер нужно в корне проекта
    container_name: container_fastapi_app
    command: ["/doc/docker_scripts/app.sh"]
#    env_file:
#      - .env-not-dev  # Для локального запуска
    environment:
      - MODE=${MODE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - TEST_DB_HOST=${TEST_DB_HOST}
      - TEST_DB_PORT=${TEST_DB_PORT}
      - TEST_DB_USER=${TEST_DB_USER}
      - TEST_DB_PASSWORD=${TEST_DB_PASSWORD}
      - TEST_DB_NAME=${TEST_DB_NAME}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - APP_URL=${APP_URL}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST}:5672/${RABBITMQ_VHOST}
    ports:
      - "3333:8000" # первая цифра внешний порт, вторая - какой порт слушается внутри контейнера
    volumes:
      - shared_images:/doc/documents
    networks:
      - mynetwork

  celery:
    image: celery_image
    build:
      context: .
    container_name: container_fastapi_celery
    command: ["/doc/docker_scripts/celery.sh"]
#    env_file:
#      - .env-not-dev  # Для локального запуска
    environment:
      - MODE=${MODE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - TEST_DB_HOST=${TEST_DB_HOST}
      - TEST_DB_PORT=${TEST_DB_PORT}
      - TEST_DB_USER=${TEST_DB_USER}
      - TEST_DB_PASSWORD=${TEST_DB_PASSWORD}
      - TEST_DB_NAME=${TEST_DB_NAME}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST}:5672/${RABBITMQ_VHOST}
    volumes:
      - shared_images:/doc/documents
    networks:
      - mynetwork